Coursework instructions: https://www.learn.ed.ac.uk/bbcswebdav/pid-3284688-dt-content-rid-6934905_1/courses/INFR080192018-9SV1SEM1/coursework/cw2.pdf
Sample solution: https://www.learn.ed.ac.uk/bbcswebdav/pid-3284688-dt-content-rid-6980589_1/courses/INFR080192018-9SV1SEM1/coursework/cw2-1718-solution.pdf


Introduction:

-  Sentence or two describing whole system
-  Refer reader to coursework instructions for previous information


STATIC MODELS

UML Class model (30%): 
-  All classes involved
-  Attribute descriptions must involve types
-  Operation descriptions must include types of parameters, type of return value 
-  Only include operations if important for execution of use cases
-  Don't show getters or setters, or access control information
-  Could use more than one class diagram: one for associations and dependencies, other for attributes and operations
-  Associations must include multiplicities
-  Add role names to associations as needed
-  Only show associations when they have long lifetimes (beyond use case execution)
-  Utility classes (eg. money) 


High level description (25%):
-  Include justification for chosen design
-  What alternatives were considered? Why were choices made?
-  Have you tried to design software according to principles of good design?
-  Record assumptions

  
DYNAMIC MODELS
UML sequence diagram (25%):
-  Build for close auction use case
-  Do show message names, but don't need to show arguments
-  As needed, show optional / alternative / iterative behavior


Behaviour descriptions (20%):
-  For use cases add lot, note interest, make bid
-  Textual description of objects involved, flow of messages


FURTHER INFORMATION
Message bursts:
- Single thread of control
- View system activity as bursts of messages
- Each burst is execution of scenario in use case

Messages to actors:
- Messages are either:
  - Call messages: cause invocation of operation on message destination object
  - Reply messages: return of operation invoked by earlier call message
- Actors sending messages into system at start of burst get reply message at burst end
- But - some use cases require other actors to also get notification messages
  - Include singleton MessagingService class 
  - For each kind of message sent out to actors modelling people in particular roles, include operation to this class that includes argument of type MessagingAddress for specifiying who the message should be sent to, as long as further arguments on information to include

Use cases:
1. Register buyer (Buyer)
2. Register seller (Seller)
3. Add lot (Seller)
4. View catalogue (Member of Public)
5. Note interest (Buyer)
6. Open auction (Auctioneer)
7. Make bid (Buyer)
8. Close auction (Auctioneer)


Discussion:
Mirror the auctioneer-lot, buyer-lot relationships
Move LotInformation to a separate class but keep some information associated with CatEntry (changeable)
CatalogueEntry status is integer - to be specified - could equally be an enum
Same with BidType
Add bankingdetails as a class to be consistent with personal details
register / add in ah updates appropriate lists in place
actor provides an interface - left up to subclasses to implement - allows for extendability even though all receive the same currently
viewcatalogue returns list catentry - allows for search
registereduser refers to anyone logging into the system. client is sellers / buyers
messages only concern changes in lots, so create an enumerable of the possible changes and send this in a message
don't need to pass bid to auctioneer as this can be found from the lot.currentBid
could have seller / buyer inheriying from actor but better to just have client do it as methods are shared
each seller / buyer / auctioneer have seperate impl, so for good cohesion put the methods in separately rather than in superclass
assume that authorization is contained in payment details
assume that for buyer LotSold, can tell whether the buyer won the lot and change behavior as appropriate
assume transfers use auction house account as intermediary - auction house can then take a cut
no bankingdetails class - assumed to exist anologous to personaldetails
the seller addlot function calls auctionhouse.createlot and adds it to its list of lots owned
